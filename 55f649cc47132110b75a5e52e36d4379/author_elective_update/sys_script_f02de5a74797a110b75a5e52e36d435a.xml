<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="DELETE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>incident</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="incident">assignment_groupVALCHANGES^assignment_groupISNOTEMPTY^assigned_toISEMPTY^EQ<item endquery="false" field="assignment_group" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="false" field="assignment_group" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="false" field="assigned_to" goto="false" newquery="false" operator="ISEMPTY" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Assignment_Populate_assignmentGroup</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function assignmentCase(current, previous /*null when async*/ ) {

    // Add your code here

    var groupMembers = [];
    var obj = new GlideRecord('sys_user_grmember');
    obj.addQuery('user.active', true);//check for active user 
    obj.addQuery('group', current.assignment_group);
    obj.query();
    while (obj.next()) {
        groupMembers.push(obj.user.toString());
    }
    // Get a list of their open ticket counts
    var openTicket = [], aggregate, count;
    for (var i = 0; i < groupMembers.length; i++) {
        count = 0;
       aggregate = new GlideAggregate('incident');
       aggregate.addEncodedQuer('active=true^assigned_to!=NULL');
       aggregate.addQuery('assignment_group', current.assignment_group);
       aggregate.addQuery('assigned_to', groupMembers[i]);
       aggregate.addAggregate('COUNT');
       aggregate.query();
        if(aggregate.next()){
            count = aggregate.getAggregate('COUNT');
		}
        openTicket.push(count);
    }
    // find the minimum count and store its index
	//gs.info("count of the active users: "  +  openTicket.toString());
    var minTicket = openTicket[0];
    var index = 0;
    for (var j = 1; j < openTicket.length; j++) {
        if (minTicket > openTicket[j] ) {
            minTicket = parseInt(openTicket[j]);
            index = j;
        }
    }
	//gs.info("assignment3: the user Index , ticket count and sys Id" + index + " " + minTicket+" "+ " " + groupMembers[index]);
    // get the member with the lowest count
    var userID = groupMembers[index];
    var result;
    // Log their name to verify
    var objRecord = new GlideRecord('sys_user');
    if (objRecord.get(userID)) {
        //gs.log('Name: ' + groupMembers.sys_id);
        result = objRecord.sys_id;
    }
   current.assigned_to = result;
	
})(current, previous);

]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-14 06:27:07</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f02de5a74797a110b75a5e52e36d435a</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>Assignment_Populate_assignmentGroup</sys_name>
        <sys_overrides/>
        <sys_package display_value="NeedIt" source="x_1052872_needit">55f649cc47132110b75a5e52e36d4379</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">55f649cc47132110b75a5e52e36d4379</sys_scope>
        <sys_update_name>sys_script_f02de5a74797a110b75a5e52e36d435a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-06-14 09:05:57</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="DELETE" query="documentkey=f02de5a74797a110b75a5e52e36d435a"/>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="NeedIt">55f649cc47132110b75a5e52e36d4379</application>
        <file_path/>
        <instance_id>fdeee233dbd75b4489535d00cf96193d</instance_id>
        <instance_name>dev66333</instance_name>
        <name>sys_script_f02de5a74797a110b75a5e52e36d435a</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;incident&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition table="incident"&gt;assignment_groupVALCHANGES^assignment_groupISNOTEMPTY^assigned_toISEMPTY^EQ&lt;item endquery="false" field="assignment_group" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/&gt;&lt;item endquery="false" field="assignment_group" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="assigned_to" goto="false" newquery="false" operator="ISEMPTY" or="false" value=""/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;Assignment_Populate_assignmentGroup&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function assignmentCase(current, previous /*null when async*/ ) {

    // Add your code here

    var groupMembers = [];
    var obj = new GlideRecord('sys_user_grmember');
    obj.addQuery('user.active', true);//check for active user 
    obj.addQuery('group', current.assignment_group);
    obj.query();
    while (obj.next()) {
        groupMembers.push(obj.user.toString());
    }
    // Get a list of their open ticket counts
    var openTicket = [], aggregate, count;
    for (var i = 0; i &lt; groupMembers.length; i++) {
        count = 0;
       aggregate = new GlideAggregate('incident');
       aggregate.addEncodedQuer('active=true^assigned_to!=NULL');
       aggregate.addQuery('assignment_group', current.assignment_group);
       aggregate.addQuery('assigned_to', groupMembers[i]);
       aggregate.addAggregate('COUNT');
       aggregate.query();
        if(aggregate.next()){
            count = aggregate.getAggregate('COUNT');
		}
        openTicket.push(count);
    }
    // find the minimum count and store its index
	//gs.info("count of the active users: "  +  openTicket.toString());
    var minTicket = openTicket[0];
    var index = 0;
    for (var j = 1; j &lt; openTicket.length; j++) {
        if (minTicket &gt; openTicket[j] ) {
            minTicket = parseInt(openTicket[j]);
            index = j;
        }
    }
	//gs.info("assignment3: the user Index , ticket count and sys Id" + index + " " + minTicket+" "+ " " + groupMembers[index]);
    // get the member with the lowest count
    var userID = groupMembers[index];
    var result;
    // Log their name to verify
    var objRecord = new GlideRecord('sys_user');
    if (objRecord.get(userID)) {
        //gs.log('Name: ' + groupMembers.sys_id);
        result = objRecord.sys_id;
    }
   current.assigned_to = result;
	
})(current, previous);

]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-06-14 06:27:07&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;f02de5a74797a110b75a5e52e36d435a&lt;/sys_id&gt;&lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;&lt;sys_name&gt;Assignment_Populate_assignmentGroup&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="NeedIt" source="x_1052872_needit"&gt;55f649cc47132110b75a5e52e36d4379&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NeedIt"&gt;55f649cc47132110b75a5e52e36d4379&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_f02de5a74797a110b75a5e52e36d435a&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-06-14 09:05:57&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;before&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=f02de5a74797a110b75a5e52e36d435a"/&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1613659961</payload_hash>
        <record_name>Assignment_Populate_assignmentGroup</record_name>
        <reverted_from/>
        <source>8a0c990047d32110b75a5e52e36d4378</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-14 09:05:58</sys_created_on>
        <sys_id>6ef19ee7471ba110b75a5e52e36d43a1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>188b92792390000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-06-14 09:05:58</sys_updated_on>
        <type>Business Rule</type>
        <update_guid>e2f19ee79d1ba110c1152d3b538c11a1</update_guid>
        <update_guid_history>e2f19ee79d1ba110c1152d3b538c11a1:-1613659961,7c490663e01ba1105a33d545dae0e435:1487774682,42c3c62fbad7a110163e11288a9b6b1d:-949795130,7d493da375d7a110973a7c42822b8d1f:-346774002,31397de7b497a110b4258459a01989b0:55017858,e108b5e74097a110f2479c385381340d:922177934,bf9dada7c797a110835984cb6e82f4f5:1012071758</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-14 09:07:11</sys_created_on>
        <sys_db_object display_value="" name="sys_script">sys_script</sys_db_object>
        <sys_id>1ef185156d764a7ba2d000e769a7c311</sys_id>
        <sys_metadata>f02de5a74797a110b75a5e52e36d435a</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Assignment_Populate_assignmentGroup</sys_name>
        <sys_package display_value="NeedIt" source="x_1052872_needit">55f649cc47132110b75a5e52e36d4379</sys_package>
        <sys_parent display_value="Incident">6c8c004724b021108c8bc6863d3fad1c</sys_parent>
        <sys_policy/>
        <sys_scope display_value="NeedIt">55f649cc47132110b75a5e52e36d4379</sys_scope>
        <sys_scope_delete display_value="">411510a8df604654945e7dca5ec03b61</sys_scope_delete>
        <sys_update_name>sys_script_f02de5a74797a110b75a5e52e36d435a</sys_update_name>
        <sys_update_version display_value="sys_script_f02de5a74797a110b75a5e52e36d435a">6ef19ee7471ba110b75a5e52e36d43a1</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-06-14 09:07:11</sys_updated_on>
    </sys_metadata_delete>
</record_update>
